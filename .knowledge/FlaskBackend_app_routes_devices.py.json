{"is_source_file": true, "format": "Python", "description": "This file implements Flask route handlers and API logic for managing devices in a web application. It includes endpoints for CRUD operations (create, read, update, delete) for device resources stored in a MongoDB database, with input validation and environment configuration handling.", "external_files": ["flask", "flask.views", "flask_smorest", "pymongo", "pymongo.errors"], "external_methods": ["request.get_json"], "published": ["blp"], "classes": [{"name": "DevicesCollection", "description": "A Flask MethodView class handling the collection of device resources, supporting GET and POST methods to retrieve all devices or create a new device."}, {"name": "DeviceItem", "description": "A Flask MethodView class handling individual device resource operations, supporting GET, PUT, and DELETE methods for specific devices identified by name."}], "methods": [{"name": "bool _validate_ipv4(ip: str)", "description": "Validates whether a given string is a valid IPv4 address format.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,List[str]]] _validate_device_payload(payload: Dict[str, Any])", "description": "Checks the payload for creating/updating a device, ensuring required fields are present and valid.", "scope": "", "scopeKind": ""}, {"name": "_mongo_collection()", "description": "Initializes and returns the MongoDB collection for devices based on environment variables.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _sanitize(doc: Dict[str, Any])", "description": "Removes internal MongoDB document fields such as _id and id for API responses.", "scope": "", "scopeKind": ""}, {"name": "delete(self, name: str)", "scope": "DeviceItem", "scopeKind": "class", "description": "unavailable"}, {"name": "get(self)", "scope": "DevicesCollection", "scopeKind": "class", "description": "unavailable"}, {"name": "get(self, name: str)", "scope": "DeviceItem", "scopeKind": "class", "description": "unavailable"}, {"name": "post(self)", "scope": "DevicesCollection", "scopeKind": "class", "description": "unavailable"}, {"name": "put(self, name: str)", "scope": "DeviceItem", "scopeKind": "class", "description": "unavailable"}], "calls": ["request.get_json", "_mongo_collection", "_sanitize", "coll.find", "coll.find_one", "coll.insert_one", "coll.update_one", "coll.delete_one", "coll.create_index"], "search-terms": ["devices API", "MongoDB device collection", "Flask Devices blueprint", "device payload validation", "device CRUD endpoints"], "state": 2, "file_id": 7, "knowledge_revision": 34, "git_revision": "47da650ff26509830936bf86aa616efa595efbbd", "revision_history": [{"15": ""}, {"22": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"24": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"25": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"26": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"27": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"28": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"29": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"30": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"34": "47da650ff26509830936bf86aa616efa595efbbd"}], "ctags": [{"_type": "tag", "name": "DEVICE_TYPES", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^DEVICE_TYPES = {\"router\", \"switch\", \"server\"}$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "DeviceItem", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^class DeviceItem(MethodView):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DevicesCollection", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^class DevicesCollection(MethodView):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "IPV4_PATTERN", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^IPV4_PATTERN = re.compile(r\"^(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}$\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "MongoClient", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    MongoClient = None  # type: ignore$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "PyMongoError", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    PyMongoError = Exception  # type: ignore$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_mongo_collection", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _mongo_collection():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_sanitize", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _sanitize(doc: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(doc: Dict[str, Any])"}, {"_type": "tag", "name": "_validate_device_payload", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _validate_device_payload(payload: Dict[str, Any]) -> Optional[Dict[str, List[str]]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,List[str]]]", "kind": "function", "signature": "(payload: Dict[str, Any])"}, {"_type": "tag", "name": "_validate_ipv4", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _validate_ipv4(ip: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(ip: str)"}, {"_type": "tag", "name": "blp", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^blp = Blueprint($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "delete", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def delete(self, name: str):$/", "language": "Python", "kind": "member", "signature": "(self, name: str)", "scope": "DeviceItem", "scopeKind": "class"}, {"_type": "tag", "name": "formatter", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    formatter = logging.Formatter($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def get(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "DevicesCollection", "scopeKind": "class"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def get(self, name: str):$/", "language": "Python", "kind": "member", "signature": "(self, name: str)", "scope": "DeviceItem", "scopeKind": "class"}, {"_type": "tag", "name": "handler", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    handler = logging.StreamHandler()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "post", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def post(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "DevicesCollection", "scopeKind": "class"}, {"_type": "tag", "name": "put", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def put(self, name: str):$/", "language": "Python", "kind": "member", "signature": "(self, name: str)", "scope": "DeviceItem", "scopeKind": "class"}], "hash": "e150def6b0f1cdb54808ce545d5bbba0", "format-version": 4, "code-base-name": "FlaskBackend", "filename": "FlaskBackend/app/routes/devices.py", "fields": [{"name": "DEVICE_TYPES = {\"router\", \"switch\", \"server\"}", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "IPV4_PATTERN = re.compile(r\"^(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}$\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "MongoClient = None  # type: ignore", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "PyMongoError = Exception  # type: ignore", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "blp = Blueprint(", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "formatter = logging.Formatter(", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "handler = logging.StreamHandler()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}