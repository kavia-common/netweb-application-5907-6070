{"is_source_file": true, "format": "Python", "description": "This file defines Flask route handlers for managing 'devices' in a web application. It includes endpoints for CRUD operations, validation functions, and MongoDB integration for device data storage.", "external_files": ["flask", "flask.views", "flask_smorest", "pymongo", "pymongo.errors"], "external_methods": ["request.get_json", "coll.find", "coll.find_one", "coll.insert_one", "coll.update_one", "coll.delete_one", "coll.create_index"], "published": ["blp"], "classes": [{"name": "DevicesCollection", "description": "Handles GET and POST requests for collections of devices at the /devices endpoint."}, {"name": "DeviceItem", "description": "Handles GET, PUT, DELETE requests for individual device items identified by device_id."}], "methods": [{"name": "bool _validate_ipv4(ip: str)", "description": "Validates whether a string is a valid IPv4 address.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,List[str]]] _validate_device_payload(payload: Dict[str, Any], require_id: bool = True)", "description": "Validates the payload for device creation or update, checking required fields and formats.", "scope": "", "scopeKind": ""}, {"name": "_mongo_collection()", "description": "Initializes and returns a MongoDB collection based on environment variables.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _sanitize(doc: Dict[str, Any])", "description": "Removes MongoDB internal '_id' field from a document for external API responses.", "scope": "", "scopeKind": ""}, {"name": "delete(self, device_id: int)", "scope": "DeviceItem", "scopeKind": "class", "description": "unavailable"}, {"name": "get(self)", "scope": "DevicesCollection", "scopeKind": "class", "description": "unavailable"}, {"name": "get(self, device_id: int)", "scope": "DeviceItem", "scopeKind": "class", "description": "unavailable"}, {"name": "post(self)", "scope": "DevicesCollection", "scopeKind": "class", "description": "unavailable"}, {"name": "put(self, device_id: int)", "scope": "DeviceItem", "scopeKind": "class", "description": "unavailable"}], "calls": ["coll.find", "coll.find_one", "coll.insert_one", "coll.update_one", "coll.delete_one", "coll.create_index", "request.get_json"], "search-terms": ["devices endpoints", "device payload validation", "MongoDB device collection", "Flask device routes", "device ID CRUD"], "state": 2, "file_id": 7, "knowledge_revision": 15, "git_revision": "", "ctags": [{"_type": "tag", "name": "DEVICE_TYPES", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^DEVICE_TYPES = {\"router\", \"switch\", \"server\"}$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "DeviceItem", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^class DeviceItem(MethodView):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DevicesCollection", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^class DevicesCollection(MethodView):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "IPV4_PATTERN", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^IPV4_PATTERN = re.compile(r\"^(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}$\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "MongoClient", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    MongoClient = None  # type: ignore$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "PyMongoError", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    PyMongoError = Exception  # type: ignore$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_mongo_collection", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _mongo_collection():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_sanitize", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _sanitize(doc: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(doc: Dict[str, Any])"}, {"_type": "tag", "name": "_validate_device_payload", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _validate_device_payload(payload: Dict[str, Any], require_id: bool = True) -> Optional[Dict[/", "language": "Python", "typeref": "typename:Optional[Dict[str,List[str]]]", "kind": "function", "signature": "(payload: Dict[str, Any], require_id: bool = True)"}, {"_type": "tag", "name": "_validate_ipv4", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _validate_ipv4(ip: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(ip: str)"}, {"_type": "tag", "name": "blp", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^blp = Blueprint($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "delete", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def delete(self, device_id: int):$/", "language": "Python", "kind": "member", "signature": "(self, device_id: int)", "scope": "DeviceItem", "scopeKind": "class"}, {"_type": "tag", "name": "formatter", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    formatter = logging.Formatter($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def get(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "DevicesCollection", "scopeKind": "class"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def get(self, device_id: int):$/", "language": "Python", "kind": "member", "signature": "(self, device_id: int)", "scope": "DeviceItem", "scopeKind": "class"}, {"_type": "tag", "name": "handler", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    handler = logging.StreamHandler()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "post", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def post(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "DevicesCollection", "scopeKind": "class"}, {"_type": "tag", "name": "put", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def put(self, device_id: int):$/", "language": "Python", "kind": "member", "signature": "(self, device_id: int)", "scope": "DeviceItem", "scopeKind": "class"}], "hash": "efe9cbb3ce83291aacef11f6bd40a4dc", "format-version": 4, "code-base-name": "FlaskBackend", "filename": "FlaskBackend/app/routes/devices.py", "fields": [{"name": "DEVICE_TYPES = {\"router\", \"switch\", \"server\"}", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "IPV4_PATTERN = re.compile(r\"^(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}$\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "MongoClient = None  # type: ignore", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "PyMongoError = Exception  # type: ignore", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "blp = Blueprint(", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "formatter = logging.Formatter(", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "handler = logging.StreamHandler()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"15": ""}]}