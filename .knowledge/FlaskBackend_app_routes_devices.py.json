{"is_source_file": true, "format": "Python", "description": "This file defines REST API endpoints for device management using Flask. It includes route handlers for CRUD operations, validation functions, and MongoDB interactions for storing device data. The code handles device creation, retrieval, updating, and deletion, validating inputs, and ensures each device has a unique name.", "external_files": ["flask", "flask.views", "flask_smorest", "pymongo", "pymongo.errors", "os", "re", "typing"], "external_methods": ["request.get_json", "coll.find", "coll.find_one", "coll.insert_one", "coll.update_one", "coll.delete_one", "coll.create_index"], "published": ["app.routes.devices"], "classes": [{"name": "DevicesCollection", "description": "Handles GET and POST methods for /devices route, managing collections of devices in the database."}, {"name": "DeviceItem", "description": "Handles GET, PUT, and DELETE methods for /devices/<name> route, managing individual device entries."}], "methods": [{"name": "bool _validate_ipv4(ip: str)", "description": "Validates if a given string is a valid IPv4 address.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,List[str]]] _validate_device_payload(payload: Dict[str, Any])", "description": "Validates device data payload for required fields and correct formats.", "scope": "", "scopeKind": ""}, {"name": "_mongo_collection()", "description": "Initializes and returns the MongoDB collection used for storing device data.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] _sanitize(doc: Dict[str, Any])", "description": "Removes internal MongoDB fields from a document before exposing via API.", "scope": "", "scopeKind": ""}, {"name": "delete(self, name: str)", "scope": "DeviceItem", "scopeKind": "class", "description": "unavailable"}, {"name": "get(self)", "scope": "DevicesCollection", "scopeKind": "class", "description": "unavailable"}, {"name": "get(self, name: str)", "scope": "DeviceItem", "scopeKind": "class", "description": "unavailable"}, {"name": "post(self)", "scope": "DevicesCollection", "scopeKind": "class", "description": "unavailable"}, {"name": "put(self, name: str)", "scope": "DeviceItem", "scopeKind": "class", "description": "unavailable"}], "calls": ["coll.find", "coll.find_one", "coll.insert_one", "coll.update_one", "coll.delete_one", "coll.create_index"], "search-terms": ["Flask device routes", "MongoDB device collection", "device validation", "device CRUD API", "Flask MethodView devices", "device name uniqueness"], "state": 2, "file_id": 7, "knowledge_revision": 30, "git_revision": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094", "revision_history": [{"15": ""}, {"22": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"24": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"25": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"26": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"27": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"28": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"29": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}, {"30": "6dd87ffca8b203f0dc17905f9ff89d64ffa8c094"}], "ctags": [{"_type": "tag", "name": "DEVICE_TYPES", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^DEVICE_TYPES = {\"router\", \"switch\", \"server\"}$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "DeviceItem", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^class DeviceItem(MethodView):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DevicesCollection", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^class DevicesCollection(MethodView):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "IPV4_PATTERN", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^IPV4_PATTERN = re.compile(r\"^(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}$\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "MongoClient", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    MongoClient = None  # type: ignore$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "PyMongoError", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    PyMongoError = Exception  # type: ignore$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_mongo_collection", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _mongo_collection():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_sanitize", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _sanitize(doc: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(doc: Dict[str, Any])"}, {"_type": "tag", "name": "_validate_device_payload", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _validate_device_payload(payload: Dict[str, Any]) -> Optional[Dict[str, List[str]]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,List[str]]]", "kind": "function", "signature": "(payload: Dict[str, Any])"}, {"_type": "tag", "name": "_validate_ipv4", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^def _validate_ipv4(ip: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(ip: str)"}, {"_type": "tag", "name": "blp", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^blp = Blueprint($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "delete", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def delete(self, name: str):$/", "language": "Python", "kind": "member", "signature": "(self, name: str)", "scope": "DeviceItem", "scopeKind": "class"}, {"_type": "tag", "name": "formatter", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    formatter = logging.Formatter($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def get(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "DevicesCollection", "scopeKind": "class"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def get(self, name: str):$/", "language": "Python", "kind": "member", "signature": "(self, name: str)", "scope": "DeviceItem", "scopeKind": "class"}, {"_type": "tag", "name": "handler", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    handler = logging.StreamHandler()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^logger = logging.getLogger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "post", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def post(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "DevicesCollection", "scopeKind": "class"}, {"_type": "tag", "name": "put", "path": "/home/kavia/workspace/code-generation/netweb-application-5907-6070/FlaskBackend/app/routes/devices.py", "pattern": "/^    def put(self, name: str):$/", "language": "Python", "kind": "member", "signature": "(self, name: str)", "scope": "DeviceItem", "scopeKind": "class"}], "hash": "54f02087787b22e1cc1804b1ada01616", "format-version": 4, "code-base-name": "FlaskBackend", "filename": "FlaskBackend/app/routes/devices.py", "fields": [{"name": "DEVICE_TYPES = {\"router\", \"switch\", \"server\"}", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "IPV4_PATTERN = re.compile(r\"^(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}$\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "MongoClient = None  # type: ignore", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "PyMongoError = Exception  # type: ignore", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "blp = Blueprint(", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "formatter = logging.Formatter(", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "handler = logging.StreamHandler()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "logger = logging.getLogger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}]}